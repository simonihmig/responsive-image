// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`LQIP > blurhash LQIP is supported 1`] = `
"import { findMatchingImage } from "@responsive-image/core";
import { decode2url } from "@responsive-image/core/blurhash/decode";
const images = [{
  url: "/image-100w.jpg",
  width: 100,
  format: "jpeg"
}, {
  url: "/image-100w.webp",
  width: 100,
  format: "webp"
}, {
  url: "/image-200w.jpg",
  width: 200,
  format: "jpeg"
}, {
  url: "/image-200w.webp",
  width: 200,
  format: "webp"
}];
const image = {
  imageTypes: [
    "jpeg",
    "webp"
  ],
  availableWidths: [
    100,
    200
  ],
  aspectRatio: 1.5,
  imageUrlFor: (w, f) => {
    var _a;
    return (_a = findMatchingImage(images, w, f ?? "jpeg")) == null ? void 0 : _a.url;
  },
  lqip: {
    bgImage: () => decode2url("M53dVIR8D8*Ft2MpoxylRoRlHYniyBRQbu", 5, 3)
  }
};
console.log(image);
"
`;

exports[`LQIP > color LQIP is supported 1`] = `
"import { findMatchingImage } from "@responsive-image/core";
const images = [{
  url: "/image-100w.jpg",
  width: 100,
  format: "jpeg"
}, {
  url: "/image-100w.webp",
  width: 100,
  format: "webp"
}, {
  url: "/image-200w.jpg",
  width: 200,
  format: "jpeg"
}, {
  url: "/image-200w.webp",
  width: 200,
  format: "webp"
}];
const image = {
  imageTypes: [
    "jpeg",
    "webp"
  ],
  availableWidths: [
    100,
    200
  ],
  aspectRatio: 1.5,
  imageUrlFor: (w, f) => {
    var _a;
    return (_a = findMatchingImage(images, w, f ?? "jpeg")) == null ? void 0 : _a.url;
  },
  lqip: {
    type: "color",
    "class": "ri-dyn-0"
  }
};
console.log(image);
"
`;

exports[`LQIP > inline LQIP is supported 1`] = `
"import { findMatchingImage } from "@responsive-image/core";
const images = [{
  url: "/image-100w.jpg",
  width: 100,
  format: "jpeg"
}, {
  url: "/image-100w.webp",
  width: 100,
  format: "webp"
}, {
  url: "/image-200w.jpg",
  width: 200,
  format: "jpeg"
}, {
  url: "/image-200w.webp",
  width: 200,
  format: "webp"
}];
const image = {
  imageTypes: [
    "jpeg",
    "webp"
  ],
  availableWidths: [
    100,
    200
  ],
  aspectRatio: 1.5,
  imageUrlFor: (w, f) => {
    var _a;
    return (_a = findMatchingImage(images, w, f ?? "jpeg")) == null ? void 0 : _a.url;
  },
  lqip: {
    type: "inline",
    "class": "ri-dyn-0"
  }
};
console.log(image);
"
`;

exports[`LQIP > thumbhash LQIP is supported 1`] = `
"import { findMatchingImage } from "@responsive-image/core";
import { decode2url } from "@responsive-image/core/thumbhash/decode";
const images = [{
  url: "/image-100w.jpg",
  width: 100,
  format: "jpeg"
}, {
  url: "/image-100w.webp",
  width: 100,
  format: "webp"
}, {
  url: "/image-200w.jpg",
  width: 200,
  format: "jpeg"
}, {
  url: "/image-200w.webp",
  width: 200,
  format: "webp"
}];
const image = {
  imageTypes: [
    "jpeg",
    "webp"
  ],
  availableWidths: [
    100,
    200
  ],
  aspectRatio: 1.5,
  imageUrlFor: (w, f) => {
    var _a;
    return (_a = findMatchingImage(images, w, f ?? "jpeg")) == null ? void 0 : _a.url;
  },
  lqip: {
    bgImage: () => decode2url("jJcFFYI1fIWHe4dweXlYeUaAmWj3")
  }
};
console.log(image);
"
`;

exports[`custom loader options are supported 1`] = `
"import { findMatchingImage } from "@responsive-image/core";
const images = [{
  url: "/test-100.png",
  width: 100,
  format: "png"
}, {
  url: "/test-200.png",
  width: 200,
  format: "png"
}];
const image = {
  imageTypes: [
    "png"
  ],
  availableWidths: [
    100,
    200
  ],
  aspectRatio: 1.5,
  imageUrlFor: (w, f) => {
    var _a;
    return (_a = findMatchingImage(images, w, f ?? "png")) == null ? void 0 : _a.url;
  },
  lqip: void 0
};
console.log(image);
"
`;

exports[`custom query params are supported 1`] = `
"import { findMatchingImage } from "@responsive-image/core";
const images = [{
  url: "/image-100w.png",
  width: 100,
  format: "png"
}, {
  url: "/image-200w.png",
  width: 200,
  format: "png"
}];
const image = {
  imageTypes: [
    "png"
  ],
  availableWidths: [
    100,
    200
  ],
  aspectRatio: 1.5,
  imageUrlFor: (w, f) => {
    var _a;
    return (_a = findMatchingImage(images, w, f ?? "png")) == null ? void 0 : _a.url;
  },
  lqip: void 0
};
console.log(image);
"
`;

exports[`different aspect ratio 1`] = `
"import { findMatchingImage } from "@responsive-image/core";
const images = [{
  url: "/image-100w.png",
  width: 100,
  format: "png"
}, {
  url: "/image-200w.png",
  width: 200,
  format: "png"
}];
const image = {
  imageTypes: [
    "png"
  ],
  availableWidths: [
    100,
    200
  ],
  aspectRatio: 0.6666666666666666,
  imageUrlFor: (w, f) => {
    var _a;
    return (_a = findMatchingImage(images, w, f ?? "png")) == null ? void 0 : _a.url;
  },
  lqip: void 0
};
console.log(image);
"
`;

exports[`filter > it operates on included assets 1`] = `
"import { findMatchingImage } from "@responsive-image/core";
const images = [{
  url: "/image-640w.jpg",
  width: 640,
  format: "jpeg"
}, {
  url: "/image-640w.webp",
  width: 640,
  format: "webp"
}, {
  url: "/image-750w.jpg",
  width: 750,
  format: "jpeg"
}, {
  url: "/image-750w.webp",
  width: 750,
  format: "webp"
}, {
  url: "/image-828w.jpg",
  width: 828,
  format: "jpeg"
}, {
  url: "/image-828w.webp",
  width: 828,
  format: "webp"
}, {
  url: "/image-1080w.jpg",
  width: 1080,
  format: "jpeg"
}, {
  url: "/image-1080w.webp",
  width: 1080,
  format: "webp"
}, {
  url: "/image-1200w.jpg",
  width: 1200,
  format: "jpeg"
}, {
  url: "/image-1200w.webp",
  width: 1200,
  format: "webp"
}, {
  url: "/image-1920w.jpg",
  width: 1920,
  format: "jpeg"
}, {
  url: "/image-1920w.webp",
  width: 1920,
  format: "webp"
}, {
  url: "/image-2048w.jpg",
  width: 2048,
  format: "jpeg"
}, {
  url: "/image-2048w.webp",
  width: 2048,
  format: "webp"
}, {
  url: "/image-3840w.jpg",
  width: 3840,
  format: "jpeg"
}, {
  url: "/image-3840w.webp",
  width: 3840,
  format: "webp"
}];
const image = {
  imageTypes: [
    "jpeg",
    "webp"
  ],
  availableWidths: [
    640,
    750,
    828,
    1080,
    1200,
    1920,
    2048,
    3840
  ],
  aspectRatio: 1.5,
  imageUrlFor: (w, f) => {
    var _a;
    return (_a = findMatchingImage(images, w, f ?? "jpeg")) == null ? void 0 : _a.url;
  },
  lqip: void 0
};
console.log(image);
"
`;

exports[`imagetools params are supported 1`] = `
"import { findMatchingImage } from "@responsive-image/core";
const images = [{
  url: "/image-100w.png",
  width: 100,
  format: "png"
}, {
  url: "/image-200w.png",
  width: 200,
  format: "png"
}];
const image = {
  imageTypes: [
    "png"
  ],
  availableWidths: [
    100,
    200
  ],
  aspectRatio: 1.5,
  imageUrlFor: (w, f) => {
    var _a;
    return (_a = findMatchingImage(images, w, f ?? "png")) == null ? void 0 : _a.url;
  },
  lqip: void 0
};
console.log(image);
"
`;

exports[`it produces expected output 1`] = `
"import { findMatchingImage } from "@responsive-image/core";
const images = [{
  url: "/image-640w.png",
  width: 640,
  format: "png"
}, {
  url: "/image-640w.webp",
  width: 640,
  format: "webp"
}, {
  url: "/image-750w.png",
  width: 750,
  format: "png"
}, {
  url: "/image-750w.webp",
  width: 750,
  format: "webp"
}, {
  url: "/image-828w.png",
  width: 828,
  format: "png"
}, {
  url: "/image-828w.webp",
  width: 828,
  format: "webp"
}, {
  url: "/image-1080w.png",
  width: 1080,
  format: "png"
}, {
  url: "/image-1080w.webp",
  width: 1080,
  format: "webp"
}, {
  url: "/image-1200w.png",
  width: 1200,
  format: "png"
}, {
  url: "/image-1200w.webp",
  width: 1200,
  format: "webp"
}, {
  url: "/image-1920w.png",
  width: 1920,
  format: "png"
}, {
  url: "/image-1920w.webp",
  width: 1920,
  format: "webp"
}, {
  url: "/image-2048w.png",
  width: 2048,
  format: "png"
}, {
  url: "/image-2048w.webp",
  width: 2048,
  format: "webp"
}, {
  url: "/image-3840w.png",
  width: 3840,
  format: "png"
}, {
  url: "/image-3840w.webp",
  width: 3840,
  format: "webp"
}];
const image = {
  imageTypes: [
    "png",
    "webp"
  ],
  availableWidths: [
    640,
    750,
    828,
    1080,
    1200,
    1920,
    2048,
    3840
  ],
  aspectRatio: 1.5,
  imageUrlFor: (w, f) => {
    var _a;
    return (_a = findMatchingImage(images, w, f ?? "png")) == null ? void 0 : _a.url;
  },
  lqip: void 0
};
console.log(image);
"
`;
